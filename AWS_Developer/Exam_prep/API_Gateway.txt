API Gateway: egy olyan szolgáltatás amivel 
	létrehozhatunk,
	publikálhatunk (elérhetővé tehetünk),
	karbantarthatunk,
	scale-elhetünk,
	biztonságossá tehetünk
	REST, HTTP és WebSocket API-kat.

	
		Mint egy országút, amin a lehajtók az APIk, amik APPokhoz vezetnek.

		Integration Types:
			Lambda
				Proxy: Authentication, manage Privileges(user based restrictions)
			HTTP
			Private
			Mock

		Cognito: Mobil userek autentikációjára without IAM users.
		
	Készíthetünk vele egy REST API-it, ami meghívja a λ-inkat.
	
	Az API Gateway kétféle módban üzemelhet (mindekettő RESTful):
		- REST API
		- HTTP API	
	
	
	
	REST API:
		API keys, 
		per-client throttling, 
		request validation, 
		AWS WAF integration, 
		private API endpoints	
		
	A HTTP API jóval fapadosabb mint a REST, ezért jóval olcsóbb is. 	
		
		
	WebSocket:
			Stateful: állapottartó
			full-duplex:
				Simplex: Adott egy Adó és egy Vevő: Csak az Adó küld a Vevőnek.
				Half-Duplex: A Csatornát az Adó és a Vevő felváltva használják.
				Full-Duplex. Valójában a felek közt 2 Csatorna van és egy adott fél egyszerre képviseli az Adó és a Vevő felet. Így egy időben mehet át különböző üzenet különböző irányba. 
		kapcsolat, mely kliens - szerver között jön létre.	
		
	
	
A csel hogy a rövidítés megtévesztő a RESTful application-ben:
	Mert valójában STATE-LESS és a REST(ful) -ban a ful nem azt jelenti h STATE-ful, hanem hogy megfelel a REST követelményeinek, és abból az egyik a STATELESSNESS.
	Mi a többi kritiérima a REST-nek?
		Erőforrások gyűjteményét reprezentálja, amiket HTTP metódusokkal érünk el.
		Az erőforrások által nyújtott szolgáltatás egy egysége az endpointon keresztül érhető el. Az interfész egy lába.
		Szinkron kommunikáció. Elküldöm a választ és várok rá. Ez egy egység, ebben együtt mozgunk. Aszinkron akkor lenne ha szabadon küldözgethetnénk egymásnak. Egyoldalu kommunikáció:
			valaki csak küld, vagy kevesebbet küld / fogad. Gyakorlatilag a kért és kapott üzenetek számának egyenlősége (-1) mondja meg h egy kapcsolatban kötlezően előírt-e a kérés-válasz arány.
		
	
	
	
	
An API can only be deployed to a stage. Hence, it is not possible to deploy an API without choosing a stage.

Ahhoz hogy a userek által is elérhető legyen az új API verziónk, deployolni kell.

Deployhoz muszáj h létezzen egy stage, amire kitesszük (kvázi commitolunk).

A stage gyakorlatilag a git-ben a branch. Ahhoz h egy API-t egyértelműen azonosítsunk tudni kell a stage nevét és az API ID-t (?Miért nem elég az API ID, lehet több API-nak is ugyanaz az id-ja?)

Ha új verziót akarunk "kirakni" azt kétféle képpen is megtehetjük.
	- Az új verziót rátesszük a prod tetjére.
	- A teszteken átment új verzió dev tetején ül és a dev stage-et átnevezzük prod-nak.
	
	

A stage-ekhez tudunk különböző performance beállításokat rendelni (throttling, caching). Eezeket bármikor tudjuk updatelni, nem kell hozzá újradeployolni.	
	
	
Performancia:

	- API caching: Hogy ne kelljen annyiszor az endpointhoz fordulni.
	- Payload compression	
	
Stage variables are name-value pairs that you can define as configuration attributes associated with a deployment stage of a REST API. 
They act like environment variables and can be used in your API setup and mapping templates. 	
	
API Gateway Mapping Templates - In API Gateway, an API's method request can take a payload in a different format from the corresponding integration request payload, as required in the backend.
Similarly, vice versa is also possible. 
API Gateway lets you use mapping templates to map the payload from a method request to the corresponding integration request and from an integration response to the corresponding method response.
	
	
	
Usage plan:
	specifies who can access one or more deployed API stages and methods—and also how much and how fast they can access them. 
	The plan uses API keys to identify API clients and meters access to the associated API stages for each key.
	You can configure usage plans and API keys to allow customers to access selected APIs at agreed-upon request rates and quotas that meet their business requirements and budget constraints.	
	
	API Key: alphanumeric string values that you distribute to application developers customers to grant accesss to your API. You can use API key together with usage plans or Lambda authorizers
	to control access to your API. API Gateway can generate API keys on your behalf, or you can import them from a CSV file. 
		- Throttling limit is a request rate limit that is applied to  each API key that is added to the usage plan.
		- Quota limit is the maximum number of request with a given API key that can be submitted within a specified time interval.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
